import React, { useMemo, useCallback, useEffect, useState } from 'react';

import {
  MainContainer,
  Sidebar,
  ConversationList,
  Conversation,
  Avatar,
  ChatContainer,
  ConversationHeader,
  MessageGroup,
  Message,
  MessageList,
  MessageInput,
  TypingIndicator,
  Search,
  // @ts-ignore
} from '@chatscope/chat-ui-kit-react';

import { useChat, ChatMessage, MessageContentType, MessageDirection, MessageStatus } from '@chatscope/use-chat';
import { MessageContent, TextContent, User } from '@chatscope/use-chat';
import { Box, IconButton } from '@material-ui/core';
import { AddBox, Settings, Search as SearchIcon } from '@material-ui/icons';

interface ChatProps {
  user: User;
}

export const Chat: React.FC<ChatProps> = ({ user }) => {
  // Get all chat related values and methods from useChat hook
  const {
    currentMessages,
    conversations,
    activeConversation,
    setActiveConversation,
    sendMessage,
    getUser,
    currentMessage,
    setCurrentMessage,
    sendTyping,
    setCurrentUser,
  } = useChat();

  const [search, setSearch] = useState('');
  const [filteredConversations, setFilteredConversations] = useState(conversations);

  useEffect(() => {
    const id = setTimeout(() => {
      setFilteredConversations(
        !search
          ? conversations
          : conversations.filter(
          (c) => c.participants[0] && getUser(c.participants[0].id)?.username.toLowerCase().indexOf(search.toLowerCase()) !== -1,
          ),
      );
    }, 100)

    return () => clearTimeout(id);
  }, [search, conversations]);

  useEffect(() => {
    setCurrentUser(user);
  }, [user, setCurrentUser]);

  // Get current user data
  const [currentUserAvatar, currentUserName] = useMemo(() => {
    if (activeConversation) {
      const participant = activeConversation.participants.length > 0 ? activeConversation.participants[0] : undefined;

      if (participant) {
        const user = getUser(participant.id);
        if (user) {
          return [<Avatar src={user.avatar} />, user.username];
        }
      }
    }

    return [undefined, undefined];
  }, [activeConversation, getUser]);

  const handleChange = (value: string) => {
    // Send typing indicator to the active conversation
    // You can call this method on each onChange event
    // because sendTyping method can throttle sending this event
    // So typing event will not be send to often to the server
    setCurrentMessage(value);
    if (activeConversation) {
      sendTyping({
        conversationId: activeConversation?.id,
        isTyping: true,
        userId: user.id,
        content: value, // Note! Most often you don't want to send what the user types, as this can violate his privacy!
        throttle: true,
      });
    }
  };

  const handleSend = (text: MessageContent<TextContent>) => {
    const message = new ChatMessage({
      id: '', // Id will be generated by storage generator, so here you can pass an empty string
      content: text,
      contentType: MessageContentType.TextHtml,
      senderId: user.id,
      direction: MessageDirection.Outgoing,
      status: MessageStatus.Sent,
    });

    if (activeConversation) {
      sendMessage({
        message,
        conversationId: activeConversation.id,
        senderId: user.id,
      });
    }
  };

  const getTypingIndicator = useCallback(() => {
    if (activeConversation) {
      const typingUsers = activeConversation.typingUsers;

      if (typingUsers.length > 0) {
        const typingUserId = typingUsers.items[0].userId;

        // Check if typing user participates in the conversation
        if (activeConversation.participantExists(typingUserId)) {
          const typingUser = getUser(typingUserId);

          if (typingUser) {
            return <TypingIndicator content={`${typingUser.username} is typing`} />;
          }
        }
      }
    }

    return undefined;
  }, [activeConversation, getUser]);

  return (
    <MainContainer responsive>
      <Sidebar
        position="left"
        scrollable
        style={{ display: !activeConversation || window.innerWidth > 576 ? 'block' : 'none' }}
      >
        <ConversationHeader style={{ backgroundColor: '#fff' }}>
          <Avatar src={user.avatar} />
          <ConversationHeader.Content userName={user.username} />
          <ConversationHeader.Actions>
            <IconButton component={Box} p={0.5}>
              <AddBox />
            </IconButton>
            <IconButton component={Box} p={0.5}>
              <Settings />
            </IconButton>
          </ConversationHeader.Actions>
        </ConversationHeader>
        <Search onChange={setSearch} onClearClick={() => setSearch('')} placeholder="Найти..." />
        <ConversationList>
          {filteredConversations.map((c) => {
            // Helper for getting the data of the first participant
            const [avatar, name] = (() => {
              const participant = c.participants.length > 0 ? c.participants[0] : undefined;

              if (participant) {
                const user = getUser(participant.id);
                if (user) {
                  return [<Avatar src={user.avatar} />, user.username];
                }
              }

              return [undefined, undefined];
            })();

            return (
              <Conversation
                key={c.id}
                name={name}
                info={c.draft ? `Черновик: ${c.draft.replace(/<br>/g, '\n').replace(/&nbsp;/g, ' ')}` : user.bio}
                active={activeConversation?.id === c.id}
                unreadCnt={c.unreadCounter}
                onClick={() => setActiveConversation(c.id)}
              >
                {avatar}
              </Conversation>
            );
          })}
        </ConversationList>
      </Sidebar>
      {activeConversation && (
        <ChatContainer>
          <ConversationHeader>
            <ConversationHeader.Back onClick={() => setActiveConversation('')} />
            {currentUserAvatar}
            <ConversationHeader.Content userName={currentUserName} />
            <ConversationHeader.Actions>
              <IconButton component={Box} p={0.5}>
                <SearchIcon />
              </IconButton>
              <IconButton component={Box} p={0.5}>
                <Settings />
              </IconButton>
            </ConversationHeader.Actions>
          </ConversationHeader>
          <MessageList typingIndicator={getTypingIndicator()}>
            {activeConversation &&
              currentMessages.map((g: MessageGroup) => (
                <MessageGroup key={g.id} direction={g.direction}>
                  <MessageGroup.Messages>
                    {g.messages.map((m: ChatMessage<MessageContentType>) => (
                      <Message
                        key={m.id}
                        model={{
                          type: 'html',
                          payload: m.content,
                        }}
                      />
                    ))}
                  </MessageGroup.Messages>
                </MessageGroup>
              ))}
          </MessageList>

          {activeConversation && (
            <MessageInput
              value={currentMessage}
              onChange={handleChange}
              onSend={handleSend}
              disabled={!activeConversation}
              attachButton={true}
              placeholder="Введите сообщение..."
            />
          )}
        </ChatContainer>
      )}
    </MainContainer>
  );
};
